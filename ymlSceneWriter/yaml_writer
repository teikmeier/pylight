import yaml
from fixtures import Fixtures, ColorGroups
from colorLib import Colors

scene = {'00_version': '0.1'}
name = ''
strobe = None

led_bar_01 = Fixtures(dmx_adress =  1, dimmer_channel= 1, strobe_channel = 2, color_group_size = 6, number_of_color_groups = 12, color_groups_start_channel = 3)
led_bar_02 = Fixtures(dmx_adress = 75, dimmer_channel= 1, strobe_channel = 2, color_group_size = 6, number_of_color_groups = 12, color_groups_start_channel = 3)
fogger_01 = Fixtures(dmx_adress = 149, dimmer_channel= 2, strobe_channel = 4, color_group_size = 3, number_of_color_groups = 1, color_groups_start_channel = 5, fog_channel = 1)
fogger_02 = Fixtures(dmx_adress = 156, dimmer_channel= 2, strobe_channel = 4, color_group_size = 3, number_of_color_groups = 1, color_groups_start_channel = 5, fog_channel = 1)

#set overall faders
faders = {led_bar_01.get_dimmer_adress(): {'value': 255, 'type': 'default'},  led_bar_02.get_dimmer_adress(): {'value': 255, 'type': 'default'}}


def main():

    strobe = 0
    color1 = Colors('red')
    color2 = Colors('yellow')
    #name = set_full_color(color1, strobe, left = True, right = True)       #left and right can be specified optionally
    #name = set_cross_colors(color1, color2, strobe)
    name = set_top_color(color1, strobe, left = True, right = True)
    #name = set_bottom_color(color1, strobe, left = True, right = True)
    #name = set_lights_off()

    scene['faders'] = faders

    #write yml file
    with open(r'Scenes/' + name + r'.yml', 'w') as file:
        outputs = yaml.dump(scene, file)


'''
scene creator functions static
'''
def set_full_color(color, strobe = 0, right = True, left = True):
    led_bars, side_name = choose_led_bars(right, left)
    name = 'Full_' + color.get_color_name() + '_' + side_name
    if strobe > 0:
        name = name + '_strobe'
    scene['01_name'] = name

    for led_bar in led_bars:
        faders[led_bar.get_dimmer_adress()] = define_fader(255)
        if strobe > 0:
            faders[led_bar.get_strobe_adress()] = define_fader(strobe)
        for i in range(0, led_bar.number_of_color_groups):
            color_group = ColorGroups(led_bar.color_group_size, led_bar.get_color_groups_adress() + i*led_bar.color_group_size)
            set_color_group(color_group, color)
            
    return name

def set_cross_colors(color1, color2, strobe):
    led_bars = [led_bar_01, led_bar_02]
    name = 'Cross_' + color1.get_color_name() + '_and_' + color2.get_color_name()
    if strobe > 0:
        name = name + '_strobe'
    scene['01_name'] = name
    
    for led_bar in led_bars:
        faders[led_bar.get_dimmer_adress()] = define_fader(255)
        if strobe > 0:
            faders[led_bar.get_strobe_adress()] = define_fader(strobe)
        for i in range(0, led_bar.number_of_color_groups):
            color_group = ColorGroups(led_bar.color_group_size, led_bar.get_color_groups_adress() + i*led_bar.color_group_size)
        
            if (i%12 < 6 and led_bar == led_bar_01) or (i%12 >=6 and led_bar == led_bar_02):
                set_color_group(color_group, color1)
            else:
                set_color_group(color_group, color2)

    return name


def set_top_color(color, strobe,  right = True, left = True):
    led_bars, side_name = choose_led_bars(right, left)
    name = 'Top_' + color.get_color_name() + '_' + side_name
    if strobe > 0:
        name = name + '_strobe'
    scene['01_name'] = name
    
    for led_bar in led_bars:
        faders[led_bar.get_dimmer_adress()] = define_fader(255)
        if strobe > 0:
            faders[led_bar.get_strobe_adress()] = define_fader(strobe)
        for i in range(0, led_bar.number_of_color_groups):
            color_group = ColorGroups(led_bar.color_group_size, led_bar.get_color_groups_adress() + i*led_bar.color_group_size)
        
            if (i%12 < 6):
                set_color_group(color_group, color)

    return name


def set_bottom_color(color, strobe,  right = True, left = True):
    led_bars, side_name = choose_led_bars(right, left)
    name = 'Bottom_' + color.get_color_name() + '_' + side_name
    if strobe > 0:
        name = name + '_strobe'
    scene['01_name'] = name
    
    for led_bar in led_bars:
        faders[led_bar.get_dimmer_adress()] = define_fader(255)
        if strobe > 0:
            faders[led_bar.get_strobe_adress()] = define_fader(strobe)
        for i in range(0, led_bar.number_of_color_groups):
            color_group = ColorGroups(led_bar.color_group_size, led_bar.get_color_groups_adress() + i*led_bar.color_group_size)
        
            if (i%12 >= 6):
                set_color_group(color_group, color)

    return name

'''
tbd:
outer 4 and middle 4 (combo4)
outer 2 and middle 8
combo2
combo3
seconds (combo1)
Rise 1,2,3,4,5 dann full (right, left)
'''



def set_lights_off():
    led_bars = [led_bar_01, led_bar_02]
    name = 'lights_off'
    scene['01_name'] = name

    for led_bar in led_bars:
        faders[led_bar.get_dimmer_adress()] = define_fader(0)

    return name




'''
tbd: scene creator functions dynamic
tbd: include foggers as LEDs
'''



'''
helper functions
'''
def set_color_group(color_group, color):
    for i in range(0,color_group.color_group_size):
        if not color.get_color()[i] == 0:
            faders[color_group.color_group_adress+i] = define_fader(color.get_color()[i])
    return

def choose_led_bars(right, left):
    if right == True and left == True:
        led_bars = [led_bar_01, led_bar_02]
        side_name = ''
    elif right == True:
        led_bars = [led_bar_01]
        side_name = 'right'
    elif left == True:
        led_bars = [led_bar_02]
        side_name = 'left'
    return led_bars, side_name
    
def define_fader(value, type = 'default'):
    fader = {'value': value, 'type': type}
    return fader

#main
if __name__ == '__main__':
    main()